apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $namespace
  name: $podName
spec:
  selector:
    matchLabels:
      app: hyperledger	
      role: orderer
      org: $namespace
      orderer-id: $ordererID	  
  replicas: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: hyperledger
        role: orderer
        org: $namespace
        orderer-id: $ordererID
    spec:
      containers:
      - args:
        - orderer
        env:
        - name: FABRIC_LOGGING_SPEC
          value: INFO
        - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
          value: bridge		
        - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
          value: /var/hyperledger/orderer/tls/server.crt
        - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
          value: /var/hyperledger/orderer/tls/server.key
        - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
          value: '[/var/hyperledger/orderer/tls/ca.crt]'
        - name: ORDERER_GENERAL_GENESISFILE
          value: /var/hyperledger/orderer/orderer.genesis.block
        - name: ORDERER_GENERAL_GENESISMETHOD
          value: file
        - name: ORDERER_GENERAL_LISTENADDRESS
          value: 0.0.0.0
        - name: ORDERER_GENERAL_LOCALMSPDIR
          value: /var/hyperledger/orderer/msp
        - name: ORDERER_GENERAL_LOCALMSPID
          value: $localMSPID
        - name: ORDERER_GENERAL_TLS_CERTIFICATE
          value: /var/hyperledger/orderer/tls/server.crt
        - name: ORDERER_GENERAL_TLS_ENABLED
          value: "true"
        - name: ORDERER_GENERAL_TLS_PRIVATEKEY
          value: /var/hyperledger/orderer/tls/server.key
        - name: ORDERER_GENERAL_TLS_ROOTCAS
          value: '[/var/hyperledger/orderer/tls/ca.crt]'
        - name: ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR
          value: "1"
        - name: ORDERER_KAFKA_VERBOSE
          value: "true"
        image: hyperledger/fabric-orderer:latest
        name: $podName
        ports:
        - containerPort: 7050
        resources: {}
        volumeMounts:
         - mountPath: /var/hyperledger/orderer/msp 
           name: certificate
           #subPath: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp
           subPath: $mspPath
         - mountPath: /var/hyperledger/orderer/tls
           name: certificate
           #subPath: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/
           subPath: $tlsPath
         - mountPath: /var/hyperledger/orderer/orderer.genesis.block
           name: certificate
           subPath: genesis.block
         - mountPath: /var/hyperledger/production/orderer
           name: certificate
           subPath: $ordererID.$namespace
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric
      restartPolicy: Always
      volumes:
      - name: certificate
        persistentVolumeClaim:
            claimName: $pvName

status: {}

---

apiVersion: v1
kind: Service
metadata:
  namespace: $namespace
  name: $ordererID
spec:
  ports:
  - name: "7050"
    port: 7050
    targetPort: 7050
  selector:
   app: hyperledger
   role: orderer
   orderer-id: $ordererID
   org: $namespace
  type: NodePort	
